[ { "title": "How does AutoPWN Suite work?", "url": "/posts/AutoPWN/", "categories": "blog, programming, cyber security, autopwn-suite", "tags": "autopwn-suite", "date": "2022-06-03 12:00:00 +0300", "snippet": "What is AutoPWN Suite?AutoPWN Suite is a project for scanning vulnerabilities and exploiting systems automatically.DemoAutoPWN Suite has a very user friendly easy to read output.How does it work?AutoPWN Suite uses nmap TCP-SYN scan to enumerate the host and detect the version of softwares running on it. After gathering enough information about the host, AutoPWN Suite automatically generates a list of “keywords” to search NIST vulnerability database.ScanningTo create nmap scans in python we use nmap module for python.Host DiscoveryTo start doing host discovery, we first have to figure out which scan type we should use. Here’s how it’s done:def InitArgsScanType(args, log): scantype = ScanType.Ping if args.scan_type == \"arp\": if is_root(): scantype = ScanType.ARP else: log.logger( \"warning\", \"You need to be root in order to run arp scan.\\n\" + \"Changed scan mode to Ping Scan.\", ) elif args.scan_type is None or args.scan_type == \"\": if is_root(): scantype = ScanType.ARP return scantypeWe now know which scan type to use for host discovery. Let’s also get our target to scan.def InitArgsTarget(args, log): if args.target: target = args.target else: if args.host_file: # read targets from host file and insert all of them into an array try: with open(args.host_file, \"r\", encoding=\"utf-8\") as target_file: target = target_file.read().splitlines() except FileNotFoundError: log.logger(\"error\", \"Host file not found!\") except PermissionError: log.logger(\"error\", \"Permission denied while trying to read host file!\") except Exception: log.logger(\"error\", \"Unknown error while trying to read host file!\") else: return target target = DetectIPRange() else: if DontAskForConfirmation: try: target = DetectIPRange() except Exception as e: log.logger(\"error\", e) target = input(\"Enter target range to scan : \") else: try: target = input(\"Enter target range to scan : \") except KeyboardInterrupt: raise SystemExit(\"Ctrl+C pressed. Exiting.\") return targetHere’s how we detect target IP address range automatically:def GetIpAdress() -&gt; str: s = socket(AF_INET, SOCK_DGRAM) s.connect((\"8.8.8.8\", 80)) PrivateIPAdress = str(s.getsockname()[0]) return PrivateIPAdressdef DetectIPRange() -&gt; str: PrivateIPAdress = GetIpAdress().split(\".\") target = ( f\"{PrivateIPAdress[0]}.\" + f\"{PrivateIPAdress[1]}.\" + f\"{PrivateIPAdress[2]}.0/24\" ) return targetNow we know our target and scan type we are going to use. So let’s get to scanning!def DiscoverHosts(target, console, scantype=ScanType.ARP, mode=ScanMode.Normal) -&gt; list: if isinstance(target, list): banner( f\"Scanning {len(target)} target(s) using {scantype.name} scan ...\", \"green\", console, ) else: banner(f\"Scanning {target} using {scantype.name} scan ...\", \"green\", console) if scantype == ScanType.ARP: OnlineHosts = TestArp(target, mode) else: OnlineHosts = TestPing(target, mode) return OnlineHostsOnline hosts in our network is returned from the function.Port ScanningIn the previous part we ran a scan in our network to detect hosts that are online. But that information on it’s own is not enough. We need to detect the version of softwares running on the target machine. In order to do that, we scan the target machine for open ports.It’s actually pretty straight forward.def PortScan( target, log, scanspeed=5, host_timeout=240, mode=ScanMode.Normal, customflags=\"\",) -&gt; PortScanner: log.logger(\"info\", f\"Scanning {target} for open ports ...\") nm = PortScanner() try: if is_root(): if mode == ScanMode.Evade: nm.scan( hosts=target, arguments=\" \".join( [ \"-sS\", \"-sV\", \"-O\", \"-Pn\", \"-T\", \"2\", \"-f\", \"-g\", \"53\", \"--data-length\", \"10\", customflags, ] ), ) else: nm.scan( hosts=target, arguments=\" \".join( [ \"-sS\", \"-sV\", \"--host-timeout\", str(host_timeout), \"-Pn\", \"-O\", \"-T\", str(scanspeed), customflags, ] ), ) else: nm.scan( hosts=target, arguments=\" \".join( [ \"-sV\", \"--host-timeout\", str(host_timeout), \"-Pn\", \"-T\", str(scanspeed), customflags, ] ), ) except Exception as e: raise SystemExit(f\"Error: {e}\") else: return nmAnalyzing the ResultsWe ran a port scan on the host, but we didn’t print any information on the screen yet. We are going to use a custom function to analyze results and print them on to screen.As I documented in the code snippet, we returned a PortScanner object as results, let’s analyze it.def AnalyseScanResults(nm, log, console, target=None) -&gt; list: \"\"\" Analyse and print scan results. \"\"\" HostArray = [] if target is None: target = nm.all_hosts()[0] try: nm[target] except KeyError: log.logger(\"warning\", f\"Target {target} seems to be offline.\") return [] CurrentTargetInfo = InitHostInfo(nm[target]) if is_root(): if nm[target][\"status\"][\"reason\"] in [\"localhost-response\", \"user-set\"]: log.logger(\"info\", f\"Target {target} seems to be us.\") elif GetIpAdress() == target: log.logger(\"info\", f\"Target {target} seems to be us.\") if len(nm[target].all_tcp()) == 0: log.logger(\"warning\", f\"Target {target} seems to have no open ports.\") return HostArray banner(f\"Portscan results for {target}\", \"green\", console) if not CurrentTargetInfo.mac == \"Unknown\" and not CurrentTargetInfo.os == \"Unknown\": console.print(CurrentTargetInfo.colored(), justify=\"center\") table = Table(box=box.MINIMAL) table.add_column(\"Port\", style=\"cyan\") table.add_column(\"State\", style=\"white\") table.add_column(\"Service\", style=\"blue\") table.add_column(\"Product\", style=\"red\") table.add_column(\"Version\", style=\"purple\") for port in nm[target][\"tcp\"].keys(): state, service, product, version = InitPortInfo(nm[target][\"tcp\"][port]) table.add_row(str(port), state, service, product, version) if state == \"open\": HostArray.insert(len(HostArray), [target, port, service, product, version]) console.print(table, justify=\"center\") return HostArrayVulnerability detectionWe scanned our host and now we now its open ports and some additional information on those ports.Now this part is where I consider to be the actual magic. This part is essentially what makes vulnerability detection work.def GenerateKeyword(product: str, version: str) -&gt; str: if product == \"Unknown\": product = \"\" if version == \"Unknown\": version = \"\" keyword = \"\" dontsearch = [ \"ssh\", \"vnc\", \"http\", \"https\", \"ftp\", \"sftp\", \"smtp\", \"smb\", \"smbv2\", \"linux telnetd\", \"microsoft windows rpc\", \"metasploitable root shell\", \"gnu classpath grmiregistry\", ] if product.lower() not in dontsearch and product != \"\": keyword = f\"{product} {version}\".rstrip() return keyworddef GenerateKeywords(HostArray: list) -&gt; list: keywords = [] for port in HostArray: product = str(port[3]) version = str(port[4]) keyword = GenerateKeyword(product, version) if not keyword == \"\" and not keyword in keywords: keywords.append(keyword) return keywordsWe generated our list of keywords, now it’s time to turn them into search queries and throw them at the NIST vulnerability database as a POST request then see what we get.def SearchSploits(HostArray: list, log, console, console2, apiKey=None) -&gt; list: VulnsArray = [] target = str(HostArray[0][0]) term_width = get_terminal_width() if not CheckConnection(log): return [] keywords = GenerateKeywords(HostArray) if len(keywords) == 0: log.logger(\"warning\", f\"Insufficient information for {target}\") return [] log.logger( \"info\", f\"Searching vulnerability database for {len(keywords)} keyword(s) ...\" ) printed_banner = False with console2.status( \"[white]Searching vulnerabilities ...[/white]\", spinner=\"bouncingBar\" ) as status: for keyword in keywords: status.start() status.update( \"[white]Searching vulnerability database for[/white] \" + f\"[red]{keyword}[/red] [white]...[/white]\" ) ApiResponseCVE = SearchKeyword(keyword, log, apiKey) status.stop() if len(ApiResponseCVE) == 0: continue if not printed_banner: banner(f\"Possible vulnerabilities for {target}\", \"red\", console) printed_banner = True console.print(f\"┌─ [yellow][ {keyword} ][/yellow]\") CVEs = [] for CVE in ApiResponseCVE: CVEs.append(CVE.CVEID) console.print(f\"│\\n├─────┤ [red]{CVE.CVEID}[/red]\\n│\") wrapped_description = wrap(CVE.description, term_width - 50) console.print(f\"│\\t\\t[cyan]Description: [/cyan]\") for line in wrapped_description: console.print(f\"│\\t\\t\\t{line}\") console.print( f\"│\\t\\t[cyan]Severity: [/cyan]{CVE.severity} - {CVE.severity_score}\\n\" + f\"│\\t\\t[cyan]Exploitability: [/cyan] {CVE.exploitability}\\n\" + f\"│\\t\\t[cyan]Details: [/cyan] {CVE.details_url}\" ) VulnObject = VulnerableSoftware(title=keyword, CVEs=CVEs) VulnsArray.append(VulnObject) console.print(\"└\" + \"─\" * (term_width - 1)) return VulnsArrayAutomatically downloading exploitsWe scanned our host and found some vulnerabilities. Now it’s time for exploitation! To exploit our target we will need to download “exploit codes”.Here’s the structre of what an exploit code will look like in our program.@dataclassclass ExploitInfo: Platform: str PublishDate: str Type: str ExploitDBID: int Author: str Metasploit: bool Verified: bool Link: strGetting our exploitsThis part is pretty straight forward. Just passing every “vulnerability” object to our GetExploitAsFile function.def GetExploitsFromArray(VulnsArray, log, console, console2, target=None) -&gt; None: if target: banner(f\"Downloading exploits for {target}...\", \"blue\", console) else: banner(f\"Downloading exploits...\", \"blue\", console) with console2.status( \"[red]Downloading exploits ...[/red]\", spinner=\"bouncingBar\" ) as status: for vulnerability in VulnsArray: status.start() status.update( f\"[white]Downloading exploits for[/white] \" + f\"[red]{vulnerability.title}[/red] [white]...[/white]\" ) try: GetExploitAsFile(vulnerability, log, console, status) except KeyboardInterrupt: log.logger(\"warning\", f\"Skipping exploits for {vulnerability.title}\")Getting some info about our exploitWe will gather some information about our exploit to print it onto terminal.def GetExploitAsFile(vulnerability, log, console, status) -&gt; None: SoftwareName = vulnerability.title CVEs = vulnerability.CVEs term_width = get_terminal_width() if not exists(\"exploits\"): mkdir(\"exploits\") printed_software = [] for CVE in CVEs: Exploits = GetExploitInfo(CVE, log) if len(Exploits) == 0: continue status.stop() if SoftwareName not in printed_software: console.print(f\"┌─[yellow][ {SoftwareName} ][/yellow]\\n│\") printed_software.append(SoftwareName) console.print(f\"│\\n├─────┤ [red]{str(CVE)}[/red]\\n│\") for exploit in Exploits: content, filename = GetExploitContents(exploit.Link, log) if content is None: continue if not exists(f\"exploits/{SoftwareName}\"): mkdir(f\"exploits/{SoftwareName}\") if not exists(f\"exploits/{SoftwareName}/{CVE}\"): mkdir(f\"exploits/{SoftwareName}/{CVE}\") with open(f\"exploits/{SoftwareName}/{CVE}/{filename}\", \"wb\") as exploitfile: console.print( f\"├──────────# [white]exploits/{SoftwareName}/{CVE}/{filename}[/white]\\n\" + f\"│\\t\\t [cyan]Platform: [/cyan] {exploit.Platform}\\n\" + f\"│\\t\\t [cyan]Type: [/cyan] {exploit.Type}\\n\" + f\"│\\t\\t [cyan]Author: [/cyan] {exploit.Author}\\n\" + f\"│\\t\\t [cyan]Date: [/cyan] [bright_cyan]{exploit.PublishDate}[/bright_cyan]\\n\" + f\"│\\t\\t [cyan]Metasploit: [/cyan] {exploit.Metasploit}\\n\" + f\"│\\t\\t [cyan]Verified: [/cyan]{exploit.Verified}\\n\" + f\"│\\t\\t [cyan]Link: [/cyan] {exploit.Link}\\n│\" ) exploitfile.write(content) if SoftwareName in printed_software: console.print(\"└\" + \"─\" * (term_width - 1) + \"\\n\")Noise modeThis mode is for generating a lot of suspicious activity in the network to cause a lot of false positives in IDS/IPS and network logs.Creating noisy processesThis part we use multi threading module that is built into python to create separate processes for each host.def NoiseScan(target, log, console, scantype=ScanType.ARP, noisetimeout=None) -&gt; None: banner(\"Creating noise...\", \"green\", console) Uphosts = TestPing(target) if scantype == ScanType.ARP: if is_root(): Uphosts = TestArp(target) try: with console.status(\"Creating noise ...\", spinner=\"line\"): NoisyProcesses = [] for host in Uphosts: log.logger(\"info\", f\"Started creating noise on {host}...\") P = Process(target=CreateNoise, args=(host,)) NoisyProcesses.append(P) P.start() if noisetimeout: sleep(noisetimeout) else: while True: sleep(1) log.logger(\"info\", \"Noise scan complete!\") for P in NoisyProcesses: P.terminate() raise SystemExit except KeyboardInterrupt: log.logger(\"error\", \"Noise scan interrupted!\") raise SystemExitCreating the noiseThis part is also pretty straight forward. We spawn a nmap process with speed set to 5.def CreateNoise(target): nm = PortScanner() while True: try: if is_root(): nm.scan(hosts=target, arguments=\"-A -T 5 -D RND:10\") else: nm.scan(hosts=target, arguments=\"-A -T 5\") except KeyboardInterrupt: raise SystemExit(\"Ctr+C, aborting.\") else: breakInstallationYou can install it using pip. (sudo recommended)sudo pip install autopwn-suiteORYou can clone the repo.git clone https://github.com/GamehunterKaan/AutoPWN-Suite.gitcd AutoPWN-Suitesudo pip install -r requirements.txtORYou can download debian (deb) package from releases.sudo pip install requests rich python-nmap bs4 distrosudo apt-get install ./autopwn-suite_2.1.1.debORYou can use Google Cloud Shell.UsageRunning with root privileges (sudo) is always recommended.Automatic modeautopwn-suite -yHelp Menu$ autopwn-suite -husage: autopwn.py [-h] [-v] [-y] [-c CONFIG] [-nc] [-t TARGET] [-hf HOST_FILE] [-sd] [-st {arp,ping}] [-nf NMAP_FLAGS] [-s {0,1,2,3,4,5}] [-ht HOST_TIMEOUT] [-a API] [-m {evade,noise,normal}] [-nt TIMEOUT] [-o OUTPUT] [-ot {html,txt,svg}] [-rp {email,webhook}] [-rpe EMAIL] [-rpep PASSWORD] [-rpet EMAIL] [-rpef EMAIL] [-rpes SERVER] [-rpesp PORT] [-rpw WEBHOOK]AutoPWN Suite | A project for scanning vulnerabilities and exploiting systems automatically.options: -h, --help show this help message and exit -v, --version Print version and exit. -y, --yes-please Don't ask for anything. (Full automatic mode) -c CONFIG, --config CONFIG Specify a config file to use. (Default : None) -nc, --no-color Disable colors.Scanning: Options for scanning -t TARGET, --target TARGET Target range to scan. This argument overwrites the hostfile argument. (192.168.0.1 or 192.168.0.0/24) -hf HOST_FILE, --host-file HOST_FILE File containing a list of hosts to scan. -sd, --skip-discovery Skips the host discovery phase. -st {arp,ping}, --scan-type {arp,ping} Scan type. -nf NMAP_FLAGS, --nmap-flags NMAP_FLAGS Custom nmap flags to use for portscan. (Has to be specified like : -nf=\"-O\") -s {0,1,2,3,4,5}, --speed {0,1,2,3,4,5} Scan speed. (Default : 3) -ht HOST_TIMEOUT, --host-timeout HOST_TIMEOUT Timeout for every host. (Default :240) -a API, --api API Specify API key for vulnerability detection for faster scanning. (Default : None) -m {evade,noise,normal}, --mode {evade,noise,normal} Scan mode. -nt TIMEOUT, --noise-timeout TIMEOUT Noise mode timeout.Reporting: Options for reporting -o OUTPUT, --output OUTPUT Output file name. (Default : autopwn.log) -ot {html,txt,svg}, --output-type {html,txt,svg} Output file type. (Default : html) -rp {email,webhook}, --report {email,webhook} Report sending method. -rpe EMAIL, --report-email EMAIL Email address to use for sending report. -rpep PASSWORD, --report-email-password PASSWORD Password of the email report is going to be sent from. -rpet EMAIL, --report-email-to EMAIL Email address to send report to. -rpef EMAIL, --report-email-from EMAIL Email to send from. -rpes SERVER, --report-email-server SERVER Email server to use for sending report. -rpesp PORT, --report-email-server-port PORT Port of the email server. -rpw WEBHOOK, --report-webhook WEBHOOK Webhook to use for sending report.Module usagefrom autopwn_suite.api import AutoScannerscanner = AutoScanner()json_results = scanner.scan(\"192.168.0.1\")scanner.save_to_file(\"autopwn.json\")TODODo you have a cool feature idea? Create a feature request! 22 Completed. Arch Linux package for Arch based systems like BlackArch and ArchAttack. Function to brute force common services like ssh, vnc, ftp. GUI interface. Daemon mode.Contributing to AutoPWN SuiteI would be glad if you are willing to contribute this project. I am looking forward to merge your pull request unless its something that is not needed or just a personal preference. Also minor changes and bug fixes will not be merged. Please create an issue for those and I will do it myself. Click here for more info!LegalYou may not rent or lease, distribute, modify, sell or transfer the software to a third party. AutoPWN Suite is free for distribution, and modification with the condition that credit is provided to the creator and not used for commercial use. You may not use software for illegal or nefarious purposes. No liability for consequential damages to the maximum extent permitted by all applicable laws.Support or ContactHaving trouble using this tool? You can reach me out on discord, create an issue or create a discussion!Support &amp; Hire Me!If you want to support my work and also get your job done you can hire me on Fiverr! I do various things such as website pentesting, python programming, cleaning malware, PC optimization, file recovery and mentoring." }, { "title": "Hello World!", "url": "/posts/HELLO/", "categories": "blog, hello", "tags": "helloworld", "date": "2022-06-02 06:05:00 +0300", "snippet": "Welcome to PWN Spot!Hello there kind stranger on the internet. I would like to first thank you for visiting my website!What is PWN Spot?PWN Spot is my personal website for cyber security and programming related blogs and articles.Amazing! Can I contribute?Of course! All you have to do is open a pull request!PWN is our religion here!Yeah we love hacking! This is the place for you if you love cyber security, programming or just technology in general.while True: print(\"AUTOMATE THE HACK, HACK THE AUTOMATION!\")" } ]
